# Определение переменных окружения
variables:
#  DOCKER_IMAGE_TAG используется для тегирования образа
#  используем хэш коммита ($CI_COMMIT_SHA) в качестве тега
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHA

# Переопределяем стандартные этапы для выполнения нужных действий
stages:
  - build
  - push
  - cleanup
  - manual_status
  - commit_status

# Определение задачи для сборки Docker-образа
build:
  stage: build
  script:
    - echo "Running build stage..."
    - docker build -t $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG .
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual


# Определение задачи для загрузки образа в GitLab Registry
push:
  stage: push
  script:
    - echo "Running push stage..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual

# Определение задачи для удаления образа с GitLab Runner-а
cleanup:
  stage: cleanup
  script:
    - echo "Running cleanup stage..."
    - docker rmi $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: manual

manual_status:
  stage: manual_status
  script:
    - echo "Manual status stage running..."
  when: manual

commit_status:
  stage: commit_status
  script:
    - echo "Commit status stage running..."
  rules:
    - if: '$CI_COMMIT_TAG'